using SliceX.Models;
using SliceX.Slicer;
using System;
using System.Text;

namespace SliceX.Export
{
    public class GCodeGenerator
    {
        public string GenerateGCode(SliceResult sliceResult, PrinterSettings settings)
        {
            var sb = new StringBuilder();
            
            // Header
            sb.AppendLine("; Generated by SliceX");
            sb.AppendLine($"; Date: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"; Total Layers: {sliceResult.TotalLayers}");
            sb.AppendLine($"; Layer Thickness: {settings.LayerThickness}mm");
            sb.AppendLine($"; Print Time: {sliceResult.PrintTime:F1} minutes");
            sb.AppendLine($"; Estimated Resin: {sliceResult.EstimatedResinVolume:F1}ml");
            sb.AppendLine($"; Estimated Cost: ${sliceResult.EstimatedCost:F2}");
            sb.AppendLine();
            
            // Printer settings
            sb.AppendLine("; Printer Settings");
            sb.AppendLine($"; Build Volume: {settings.BuildVolumeX} x {settings.BuildVolumeY} x {settings.BuildVolumeZ}mm");
            sb.AppendLine($"; Exposure Time: {settings.ExposureTime}s");
            sb.AppendLine($"; Bottom Exposure: {settings.BottomExposureTime}s");
            sb.AppendLine($"; Bottom Layers: {settings.BottomLayers}");
            sb.AppendLine($"; Lift Height: {settings.LiftHeight}mm");
            sb.AppendLine($"; Lift Speed: {settings.LiftSpeed}mm/min");
            sb.AppendLine($"; Retract Speed: {settings.RetractSpeed}mm/min");
            sb.AppendLine();
            
            // Start G-code
            sb.AppendLine("; Start G-code");
            sb.AppendLine("G21 ; Set units to millimeters");
            sb.AppendLine("G90 ; Use absolute positioning");
            sb.AppendLine("M106 S0 ; Turn off fan");
            sb.AppendLine("G28 Z0 ; Home Z axis");
            sb.AppendLine();
            
            // Layer G-code
            for (int i = 0; i < sliceResult.Layers.Count; i++)
            {
                var layer = sliceResult.Layers[i];
                
                sb.AppendLine($"; Layer {layer.LayerNumber}");
                sb.AppendLine($"; Z Height: {layer.ZHeight:F3}mm");
                sb.AppendLine($"; Exposure: {layer.ExposureTime}s");
                
                // Move to layer height
                sb.AppendLine($"G0 Z{layer.ZHeight:F3} ; Move to layer height");
                
                // Display image
                sb.AppendLine($"M6054 \"layer_{layer.LayerNumber:D5}.png\" ; Display layer image");
                
                // Exposure
                sb.AppendLine($"G4 P{(int)(layer.ExposureTime * 1000)} ; Expose for {layer.ExposureTime}s");
                
                // Lift sequence
                if (i < sliceResult.Layers.Count - 1) // Don't lift on last layer
                {
                    double liftZ = layer.ZHeight + settings.LiftHeight;
                    sb.AppendLine($"G0 Z{liftZ:F3} F{settings.LiftSpeed} ; Lift");
                    sb.AppendLine($"G4 P{(int)(settings.LiftSequenceTime * 1000)} ; Wait");
                }
                
                sb.AppendLine();
            }
            
            // End G-code
            sb.AppendLine("; End G-code");
            sb.AppendLine("M106 S0 ; Turn off fan");
            sb.AppendLine($"G0 Z{settings.BuildVolumeZ:F3} ; Raise to top");
            sb.AppendLine("M18 ; Disable motors");
            sb.AppendLine("; Print complete");
            
            return sb.ToString();
        }
    }
}